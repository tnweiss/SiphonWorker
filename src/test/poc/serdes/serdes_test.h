//
// Created by Tyler on 9/3/2021.
//

#ifndef SIPHON_SERDES_TEST_H
#define SIPHON_SERDES_TEST_H


#include "serdes_test_pch.h"
#include "boost/python.hpp"


class DataContainer {
public:
    explicit DataContainer(): _data(new int8_t[0]), _size(0) {};
    explicit DataContainer(const size_t size): _data(new int8_t[size]), _size(size) {};
    explicit DataContainer(const char* data): _size(strlen(data) + 1), _data(new int8_t[_size])  {
        memcpy(_data, data, this->_size);
    };

    char* c_str() {
        return (char*)this->_data;
    }

    void* v() {
        return (void*)this->_data;
    }

    [[nodiscard]] size_t size() const {
        return this->_size;
    }

    void clear() {
        delete[] this->_data;
        this->_data = nullptr;
        this->_size = 0;
    }

    void set(void* src, size_t offset, size_t num_bytes) {
        memcpy(_data + offset, src, num_bytes);
    }

    void set(const size_t* src, size_t offset) {
      memcpy(_data + offset, src, 8);
    }

    void set(long src, size_t offset, size_t num_bytes) {
        memcpy(_data + offset, &src, num_bytes);
    }

    // copy constructor
    DataContainer(const DataContainer& other): _data(new int8_t[other._size]), _size(other._size)
    {
        std::cout << "\n\n\nNO COPYING CONTAINER\n\n\n" << std::endl;
//        std::cout << "Copy" << std::endl;
        memcpy((void *) _data, other._data, other._size);
    }

    // move constructor
    DataContainer(DataContainer&& other) noexcept : _data(std::exchange(other._data, nullptr)),
                                                    _size(other._size)
    {
//        std::cout << "Move" << std::endl;
    }

    // copy assignment
    DataContainer& operator=(const DataContainer& other)
    {
        std::cout << "\n\n\nNO COPYING CONTAINER\n\n\n" << std::endl;
//        std::cout << "Copy Assign" << std::endl;
        return *this = DataContainer(other);
    }

    // move assignment
    DataContainer& operator=(DataContainer&& other) noexcept
    {
//        std::cout << "Move Assign" << std::endl;
        std::swap(_data, other._data);
        this->_size = other._size;
        return *this;
    }


    ~DataContainer() {
        delete[] _data;
    }
private:
    size_t _size;
    int8_t* _data;
};


class SerDesTest {
public:
    /**
     * String representation of the test
     * @return
     */
    virtual const char* type() = 0;

    /**
     * Step 1. Python plugin -> redis
     * @return
     */
    virtual DataContainer serialize(PyObject*) = 0;

    /**
     * Step 2. redis -> container, read data in from redis to process
     * @return
     */
    virtual void* deserialize(DataContainer&) = 0;

    /**
     * Step 3. container -> redis, send data back to redis
     * @return
     */
    virtual DataContainer serialize(void*) = 0;

    /**
     * Used to clean up data generated by this class
     */
    virtual void delete_deserialized_data(void*) = 0;

    /**
     * Used to test to make sure there was no loss of data
     */
    virtual bool test(void*, PyObject*) = 0;

};


#endif //SIPHON_SERDES_TEST_H
